// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Participant {
  id                 String   @id @default(uuid())
  name               String
  cpf                String?  @unique
  email              String   @unique
  institution        String?
  state              String?
  academicBackground String?
  passwordHash       String   @map("password_hash")
  createdAt          DateTime @default(now()) @map("created_at")
  qrCodeToken        String   @unique 
  photoUri           String?

  registrations Registration[] @relation("ParticipantRegistrations")
  accreditations Accreditation[]
  submissions    Submission[]
  attendances Attendance[]

  @@map("participants")
}

model Administrator {
  id                 String   @id @default(uuid())
  name               String
  cpf                String   @unique
  email              String   @unique
  institution        String
  city               String
  state              String
  academicBackground String
  jobTitle           String
  photoUri           String?
  passwordHash       String   @map("password_hash")
  createdAt          DateTime @default(now()) @map("created_at")

  congresses Congress[]  @relation("AdministratorCongress")
  speakers   Speaker[]   @relation("AdministratorSpeakers")

  @@map("administrators")
}

model Reviewer {
  id                 String   @id @default(uuid())
  name               String
  cpf                String   @unique
  email              String   @unique
  institution        String
  city               String
  state              String
  academicBackground String
  photoUri           String?
  passwordHash       String   @map("password_hash")
  createdAt          DateTime @default(now()) @map("created_at")

  congresses Congress[] @relation("ReviewerCongress")

  @@map("reviewers")
}

model Congress {
  id              String          @id @default(uuid())
  name            String          @unique
  description     String
  knowledgeArea   String
  city            String
  location        String
  startDate       DateTime
  endDate         DateTime
  createdAt       DateTime        @default(now()) @map("created_at")

  administrator   Administrator   @relation("AdministratorCongress", fields: [administratorId], references: [id])
  administratorId String

  registrations Registration[]    @relation("CongressRegistrations")
  accreditations Accreditation[] 
  submissions    Submission[]
  reviewers      Reviewer[]       @relation("ReviewerCongress")
  speakers       Speaker[]        @relation("CongressSpeakers")
  events Event[]

  @@map("congresses")
}

model Registration {
  id            String    @id @default(uuid())
  createdAt     DateTime  @default(now()) @map("created_at")
  validatedAt   DateTime? @map("validated_at")
  participantId String    
  congressId    String

  participant Participant @relation("ParticipantRegistrations", fields: [participantId], references: [id], onDelete: Cascade)
  congress    Congress    @relation("CongressRegistrations", fields: [congressId], references: [id], onDelete: Cascade)
  
  @@unique([participantId, congressId])
  @@map("registrations") 
}

model Submission {
  id            String @id @default(uuid())
  title         String
  abstract      String
  fileUrl       String
  status        String
  participantId String
  congressId    String

  participant Participant @relation(fields: [participantId], references: [id])
  congress    Congress @relation(fields: [congressId], references: [id])

  @@map("submissions")
}

model Category {
  id        String    @id @default(uuid())
  name      String    @unique
  speakers  Speaker[] @relation("SpeakerCategory")

  @@map("categories")
}

model Speaker {
  id                Int         @id @default(autoincrement())
  name              String
  institution       String
  photoUri          String?
  presentationTitle String
  date              DateTime
  startTime         String
  endTime           String
  location          String

  congressId        String
  congress          Congress     @relation("CongressSpeakers", fields: [congressId], references: [id])
  administratorId   String
  administrator     Administrator @relation("AdministratorSpeakers", fields: [administratorId], references: [id])

  categoryId        String
  category          Category     @relation("SpeakerCategory", fields: [categoryId], references: [id])
  
  attendances       Attendance[] @relation("SpeakerAttendances")

  @@map("speakers")
}

model Accreditation {
  id            String    @id @default(uuid())
  createdAt     DateTime  @default(now())
  validatedAt   DateTime? 
  validatedBy   String?   
  paymentType   String    
  isValid       Boolean   @default(false) 
  qrCodeToken   String?   
  participantId String
  congressId    String

  participant   Participant @relation(fields: [participantId], references: [id], onDelete: Cascade)
  congress      Congress    @relation(fields: [congressId], references: [id], onDelete: Cascade)

  @@unique([participantId, congressId])
  @@map("accreditations")
}

model Attendance {
  id            String    @id @default(uuid())
  participantId String
  createdAt     DateTime  @default(now())
  validatedAt   DateTime?
  validatedBy   String?  

  // Campos para relação polimórfica
  eventId       String?
  speakerId     Int?
  type          String    // Pode ser 'EVENT' ou 'SPEAKER'

  participant   Participant @relation(fields: [participantId], references: [id], onDelete: Cascade)
  event         Event?      @relation(fields: [eventId], references: [id], onDelete: Cascade)
  speaker       Speaker?    @relation("SpeakerAttendances", fields: [speakerId], references: [id], onDelete: Cascade)

  @@unique([participantId, eventId], name: "participant_event")
  @@unique([participantId, speakerId], name: "participant_speaker")
  @@map("attendances")
}

model Event {
  id           String    @id @default(uuid())
  name         String
  location     String
  startTime    DateTime
  endTime      DateTime
  congressId   String

  congress     Congress   @relation(fields: [congressId], references: [id])

  attendances  Attendance[]
  
  @@map("events")
}