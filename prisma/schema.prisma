// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Participant {
  id                 String   @id @default(uuid())
  name               String
  cpf                String?  @unique
  email              String   @unique
  institution        String?
  state              String?
  academicBackground String?
  passwordHash       String   @map("password_hash")
  createdAt          DateTime @default(now()) @map("created_at")

  checkIns    CheckIn[]    @relation("ParticipantCheckIns")
  submissions Submission[]

  @@map("participants")
}

model Administrator {
  id                 String   @id @default(uuid())
  name               String
  cpf                String   @unique
  email              String   @unique
  institution        String
  city               String
  state              String
  academicBackground String
  jobTitle           String
  passwordHash       String   @map("password_hash")
  createdAt          DateTime @default(now()) @map("created_at")

  congresses Congress[]  @relation("AdministratorCongress")
  speakers   Speaker[]   @relation("AdministratorSpeakers") // Relaciona os speakers cadastrados pelo administrador

  @@map("administrators")
}

model Reviewer {
  id                 String   @id @default(uuid())
  name               String
  cpf                String   @unique
  email              String   @unique
  institution        String
  city               String
  state              String
  academicBackground String
  passwordHash       String   @map("password_hash")
  createdAt          DateTime @default(now()) @map("created_at")

  congresses Congress[] @relation("ReviewerCongress")

  @@map("reviewers")
}

model Congress {
  id              String       @id @default(uuid())
  name            String       @unique
  description     String
  knowledgeArea   String
  city            String
  location        String
  startDate       DateTime
  endDate         DateTime
  createdAt       DateTime     @default(now()) @map("created_at")

  administrator   Administrator @relation("AdministratorCongress", fields: [administratorId], references: [id])
  administratorId String

  checkIns    CheckIn[]    @relation("CongressCheckIns")
  submissions Submission[]
  reviewers   Reviewer[]   @relation("ReviewerCongress")
  speakers    Speaker[]    @relation("CongressSpeakers") // Relaciona palestrantes ao congresso

  @@map("congresses")
}

model CheckIn {
  id            String    @id @default(uuid())
  createdAt     DateTime  @default(now()) @map("created_at")
  validatedAt   DateTime? @map("validated_at")
  participantId String    
  congressId    String    
  eventId       String?   

  participant Participant @relation("ParticipantCheckIns", fields: [participantId], references: [id], onDelete: Cascade)
  congress    Congress    @relation("CongressCheckIns", fields: [congressId], references: [id], onDelete: Cascade)
  
  @@unique([participantId])
  @@map("check_ins")
}

model Submission {
  id            String @id @default(uuid())
  title         String
  abstract      String
  fileUrl       String
  status        String
  participantId String
  congressId    String

  participant Participant @relation(fields: [participantId], references: [id])
  congress    Congress    @relation(fields: [congressId], references: [id])

  @@map("submissions")
}

model Speaker {
  id               Int         @id @default(autoincrement())
  name             String
  institution      String
  photoUri         String
  presentationTitle String
  date             DateTime
  startTime        String
  endTime          String
  location         String

  congressId       String
  congress         Congress     @relation("CongressSpeakers", fields: [congressId], references: [id])
  administratorId  String
  administrator    Administrator @relation("AdministratorSpeakers", fields: [administratorId], references: [id])

  @@map("speakers")
}
