// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Participant {
  id                 String   @id @default(uuid())
  name               String
  cpf                String?  @unique
  email              String   @unique
  institution        String?
  state              String?
  academicBackground String?
  passwordHash       String   @map("password_hash")
  createdAt          DateTime @default(now()) @map("created_at")

  checkIns    CheckIn[]    @relation("ParticipantCheckIns")
  submissions Submission[]
  works       Work[]       @relation("ParticipantWorks")
  events      Event[]      @relation("ParticipantEvents")
  evaluations Evaluation[] @relation("ParticipantEvaluations")

  @@map("participants")
}

model Administrator {
  id                 String   @id @default(uuid())
  name               String
  cpf                String   @unique
  email              String   @unique
  institution        String
  city               String
  state              String
  academicBackground String
  jobTitle           String
  passwordHash       String   @map("password_hash")
  createdAt          DateTime @default(now()) @map("created_at")

  congresses Congress[]  @relation("AdministratorCongress")
  committees Committee[] @relation("AdministratorCommittees")

  @@map("administrators")
}

model Reviewer {
  id                 String   @id @default(uuid())
  name               String
  cpf                String   @unique
  email              String   @unique
  institution        String
  city               String
  state              String
  academicBackground String
  passwordHash       String   @map("password_hash")
  createdAt          DateTime @default(now()) @map("created_at")

  reviews    Review[]
  congresses Congress[] @relation("ReviewerCongress")

  @@map("reviewers")
}

model Congress {
  id              String       @id @default(uuid())
  name            String       @unique
  description     String
  knowledgeArea   String
  city            String
  location        String
  startDate       DateTime
  endDate         DateTime
  createdAt       DateTime     @default(now()) @map("created_at")

  administrator   Administrator @relation("AdministratorCongress", fields: [administratorId], references: [id])
  administratorId String

  checkIns    CheckIn[]    @relation("CongressCheckIns")
  submissions Submission[]
  events      Event[]
  reviewers   Reviewer[]   @relation("ReviewerCongress")
  committees  Committee[]
  works       Work[]       @relation("CongressWorks")

  @@map("congresses")
}

model Professional {
  id                 String   @id @default(uuid())
  name               String
  cpf                String   @unique
  email              String   @unique
  institution        String
  city               String
  state              String
  academicBackground String
  createdAt          DateTime @default(now()) @map("created_at")

  committees Committee[]

  @@map("professionals")
}

model Committee {
  id              String        @id @default(uuid())
  role            String
  professionalId  String
  professional    Professional  @relation(fields: [professionalId], references: [id])
  administratorId String
  administrator   Administrator @relation("AdministratorCommittees", fields: [administratorId], references: [id])
  congressId      String
  congress        Congress      @relation(fields: [congressId], references: [id])

  @@map("committees")
}

model CheckIn {
  id            String    @id @default(uuid())
  createdAt     DateTime  @default(now()) @map("created_at")
  validatedAt   DateTime? @map("validated_at")
  participantId String
  congressId    String
  eventId       String?

  participant Participant @relation("ParticipantCheckIns", fields: [participantId], references: [id], onDelete: Cascade)
  congress    Congress    @relation("CongressCheckIns", fields: [congressId], references: [id], onDelete: Cascade)
  event       Event?      @relation("EventCheckIns", fields: [eventId], references: [id])

  @@unique([participantId, congressId, eventId])
  @@map("check_ins")
}

model Submission {
  id            String @id @default(uuid())
  title         String
  abstract      String
  fileUrl       String
  status        String
  participantId String
  congressId    String

  participant Participant @relation(fields: [participantId], references: [id])
  congress    Congress    @relation(fields: [congressId], references: [id])
  reviews     Review[]

  @@map("submissions")
}

model Work {
  id         String @id @default(uuid())
  title      String
  abstract   String
  fileUrl    String
  speakerId  String
  congressId String

  speaker  Participant @relation("ParticipantWorks", fields: [speakerId], references: [id])
  congress Congress    @relation("CongressWorks", fields: [congressId], references: [id])

  @@map("works")
}

model Event {
  id          String   @id @default(uuid())
  title       String
  description String
  date        DateTime
  time        DateTime
  location    String
  congressId  String
  speakerId   String?

  congress Congress     @relation(fields: [congressId], references: [id])
  speaker  Participant? @relation("ParticipantEvents", fields: [speakerId], references: [id])

  checkIns    CheckIn[]    @relation("EventCheckIns")
  evaluations Evaluation[] @relation("EventEvaluations")

  @@map("events")
}

model Review {
  id           String  @id @default(uuid())
  comments     String?
  status       String
  submissionId String
  reviewerId   String

  submission Submission @relation(fields: [submissionId], references: [id])
  reviewer   Reviewer   @relation(fields: [reviewerId], references: [id])

  @@map("reviews")
}

model Evaluation {
  id            String  @id @default(uuid())
  rating        Int
  comments      String?
  eventId       String
  participantId String

  event       Event       @relation("EventEvaluations", fields: [eventId], references: [id], onDelete: Cascade)
  participant Participant @relation("ParticipantEvaluations", fields: [participantId], references: [id], onDelete: Cascade)

  @@map("evaluations")
}

